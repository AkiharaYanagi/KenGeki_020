//=================================================================================================
//
// エグゼキャラ　ソースファイル
//
//=================================================================================================

//-------------------------------------------------------------------------------------------------
// ヘッダファイルのインクルード
//-------------------------------------------------------------------------------------------------
#include "ExeChara.h"


//-------------------------------------------------------------------------------------------------
// 定義
//-------------------------------------------------------------------------------------------------
namespace GAME
{
	//================================================
	//	関数群
	//================================================


	//================================================
	// フレーム毎に実行
	
	//バトルパラメータ入力処理
	void ExeChara::BtlPrm_Move_Input ()
	{
		m_btlPrm.Move_Input ();


		//==========================================
		//◆ 自分・攻撃 -> 相手・くらい
		//ヒット発生(攻撃成立側)
		//==========================================
		//自分ノックバック処理
		
		//★★★ 剣撃対抗 (打撃時にいずれかの入力で距離離し)
		P_ExeChara pOther =  m_pOther.lock();

		//相手（くらい側のフラグチェック）
		bool bTimerTaikou = pOther->m_btlPrm.GetTmr_Taikou()->IsActive ();

		//ノックバック量を計算済みの値
		//バトルパラメータに保存し、CalcPos()で位置を計算し、０にリセットされる
		//剣撃対抗タイマ５フレ間、ヒットストップの間はたまたま保持されている
		float accRecoil = m_btlPrm.GetAccRecoil ();

		if ( m_btlPrm.GetPlayerID () == PLAYER_ID_1 )
		{
			DBGOUT_WND_F ( DBGOUT_0, U"剣撃対抗 = {}"_fmt( bTimerTaikou ? 1 : 0 ) );
			DBGOUT_WND_F ( DBGOUT_1, U"accRecoil = {:.3f}"_fmt( accRecoil ) );
		}

		//受付時間内の場合
		if ( bTimerTaikou )
		{
			//入力が合った場合
			if ( pOther->m_pCharaInput->PushSomething () )
			{
				//@info スタミナゲージ消費
				//バランス消費で移項可能かチェック

				//現在値と比較
				int balance = pOther->m_btlPrm.GetBalance ();
				const int COST = 500;
				if ( balance < COST )
				{
					//足りないとき遷移しない
				}
				else
				{
					//必要量があれば消費して遷移する
					pOther->m_btlPrm.AddBalance ( -1 * COST );

					//成立時
					//recoil_i *= 10;
					//recoil_i += -10;
					accRecoil *= 10;
					accRecoil += -10;

					//成立フラグ
					pOther->m_btlPrm.SetTaikou ( T );
					//フレーム最初にFalse、以降同一フレーム処理で判定に用いる
					//主にエフェクト発生

					//自身の受付時間を解除
					pOther->m_btlPrm.GetTmr_Taikou()->Clear ();;
				}

				//値を再保存
				m_btlPrm.SetAccRecoil ( accRecoil );
			}
		}

	}



}	//namespace GAME

